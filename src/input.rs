//! Token input streams and tools converting to and from them..
//!
//! *“What’s up?” “I don’t know,” said Marvin, “I’ve never been there.”*
//!
//! [`Input`] is the primary trait used to feed input data into a chumsky parser. You can create them in a number of
//! ways: from strings, slices, arrays, etc.

use inspector::Inspector;

pub use crate::stream::{BoxedExactSizeStream, BoxedStream, IterInput, Stream};

use super::*;
#[cfg(feature = "std")]
use std::io::{BufReader, Read, Seek};

/// A trait for types that represents a stream of input tokens. Unlike [`Iterator`], this type
/// supports backtracking and a few other features required by the crate.
///
/// `Input` abstracts over streams which yield tokens by value or reference, and which may or may not have
/// slices of tokens taken from them for use in parser output. There are multiple traits that inherit from
/// `Input` and are implemented by types to indicate support for these specific abilities. Various combinators
/// on the [`Parser`] trait may require that the input type implement one or more of these more specific traits.
///
/// Some common input types, and which traits they implement are:
/// - `&str`: [`SliceInput`], [`StrInput`], [`ValueInput`], [`ExactSizeInput`]
/// - `&[T]`: [`SliceInput`], [`ValueInput`], [`BorrowInput`], [`ExactSizeInput`]
/// - `Stream<I>`: [`ValueInput`], [`ExactSizeInput`] if `I: ExactSizeIterator`
pub trait Input<'src>: 'src {
    /// The type of a span on this input - to provide custom span context see [`Input::spanned`].
    type Span: Span;

    /// The type of singular items read from the stream
    type Token: 'src;

    /// The token type returned by [`Input::next_maybe`], allows abstracting over by-value and by-reference inputs.
    type MaybeToken: IntoMaybe<'src, Self::Token>; // Must be `&'src Self::Token` or `Self::Token`

    /// The type used to keep track of the current location in the stream.
    ///
    /// Cursors can be used to perform stream rewinding.
    type Cursor: Clone;

    /// A type that contains cached or constant data pertaining to an input.
    ///
    /// If in doubt, `()` can be used.
    type Cache;

    /// Create an initial cursor and cache at the start of the input.
    fn begin(self) -> (Self::Cursor, Self::Cache);

    /// TODO
    fn cursor_location(cursor: &Self::Cursor) -> usize;

    /// Pull the next token, if any, from the input.
    ///
    /// For alternatives with stronger guarantees, see [`ValueInput::next`] and `BorrowInput::next_ref`.
    ///
    /// # Safety
    ///
    /// `cursor` must be generated by `Input::begin`, and must not be shared between multiple inputs.
    unsafe fn next_maybe(
        cache: &mut Self::Cache,
        cursor: &mut Self::Cursor,
    ) -> Option<Self::MaybeToken>;

    /// Create a span going from the start cursor to the end cursor (exclusive).
    ///
    /// # Safety
    ///
    /// As with [`Input::next_maybe`], the cursors passed to this function must be generated by [`Input::begin`] and
    /// must not be shared between multiple inputs.
    unsafe fn span(cache: &mut Self::Cache, range: Range<&Self::Cursor>) -> Self::Span;

    /// Split an input that produces tokens of type `(T, S)` into one that produces tokens of type `T` and spans of
    /// type `S`.
    ///
    /// This is commonly required for lexers that generate token-span tuples. For example, `logos`'
    /// [`SpannedIter`](https://docs.rs/logos/0.12.0/logos/struct.Lexer.html#method.spanned) lexer generates such
    /// pairs.
    ///
    /// Also required is an 'End Of Input' (EoI) span. This span is arbitrary, but is used by the input to produce
    /// sensible spans that extend to the end of the input or are zero-width. Most implementations simply use some
    /// equivalent of `len..len` (i.e: a span where both the start and end cursors are set to the end of the input).
    /// However, what you choose for this span is up to you: but consider that the context, start, and end of the span
    /// will be recombined to create new spans as required by the parser.
    ///
    /// Although `Spanned` does implement [`BorrowInput`], please be aware that, as you might anticipate, the slices
    /// will be those of the original input (usually `&[(T, S)]`) and not `&[T]` so as to avoid the need to copy
    /// around sections of the input.
    fn spanned<T, S>(self, eoi: S) -> SpannedInput<T, S, Self>
    where
        Self: Input<'src, Token = (T, S)> + Sized,
        T: 'src,
        S: Span + Clone + 'src,
    {
        SpannedInput {
            input: self,
            eoi,
            phantom: PhantomData,
        }
    }

    /// Add extra context within spans generated by this input.
    ///
    /// This is useful if you wish to include extra context that applies to all spans emitted during a parse, such as
    /// an identifier that corresponds to the file the spans originated from.
    ///
    /// Returns spans containing your provided context as the Span::Context
    fn with_context<S: Span>(self, context: S::Context) -> WithContext<S, Self>
    where
        Self: Sized,
    {
        WithContext {
            input: self,
            context,
            phantom: PhantomData,
        }
    }

    /// Map the spans output for this input to a different output span.
    ///
    /// This is useful if you wish to include extra context that applies to all spans emitted during a parse, such as
    /// an identifier that corresponds to the file the spans originated from.
    fn map_span<S: Span, F>(self, map_fn: F) -> MappedSpan<S, Self, F>
    where
        Self: Input<'src> + Sized,
        F: Fn(Self::Span) -> S,
    {
        MappedSpan {
            input: self,
            map_fn,
            phantom: PhantomData,
        }
    }
}

/// Implement by inputs that have a known size (including spans)
pub trait ExactSizeInput<'src>: Input<'src> {
    /// Get a span from a start cursor to the end of the input.
    ///
    /// # Safety
    ///
    /// As with functions on [`Input`], the cursors provided must be generated by this input.
    unsafe fn span_from(cache: &mut Self::Cache, range: RangeFrom<&Self::Cursor>) -> Self::Span;
}

/// Implemented by inputs that represent slice-like streams of input tokens.
pub trait SliceInput<'src>: ExactSizeInput<'src> {
    /// The unsized slice type of this input. For [`&str`] it's `&str`, and for [`&[T]`] it will be `&[T]`.
    type Slice;

    /// Get the full slice of the input
    ///
    /// # Safety
    ///
    /// As with functions on [`Input`], the cursors provided must be generated by this input.
    fn full_slice(cache: &mut Self::Cache) -> Self::Slice;

    /// Get a slice from a start and end cursor
    ///
    /// # Safety
    ///
    /// As with functions on [`Input`], the cursors provided must be generated by this input.
    unsafe fn slice(cache: &mut Self::Cache, range: Range<&Self::Cursor>) -> Self::Slice;

    /// Get a slice from a start cursor to the end of the input
    ///
    /// # Safety
    ///
    /// As with functions on [`Input`], the cursors provided must be generated by this input.
    unsafe fn slice_from(cache: &mut Self::Cache, from: RangeFrom<&Self::Cursor>) -> Self::Slice;
}

// Implemented by inputs that reference a string slice and use byte indices as their cursor. This trait is sealed right
// now because `StrInput` places additional requirements on its cursor semantics.
/// A trait for types that represent string-like streams of input tokens.
pub trait StrInput<'src, C: Char>:
    Sealed + ValueInput<'src, Cursor = usize, Token = C> + SliceInput<'src, Slice = &'src C::Str>
{
}

/// Implemented by inputs that can have tokens borrowed from them.
pub trait ValueInput<'src>: Input<'src> {
    /// Get the next cursor from the provided one, and the next token if it exists
    ///
    /// # Safety
    ///
    /// As with functions on [`Input`], the cursors provided must be generated by this input.
    unsafe fn next(cache: &mut Self::Cache, cursor: &mut Self::Cursor) -> Option<Self::Token>;
}

/// Implemented by inputs that can have tokens borrowed from them.
pub trait BorrowInput<'src>: Input<'src> {
    /// Borrowed version of [`ValueInput::next`] with the same safety requirements.
    ///
    /// # Safety
    ///
    /// As with functions on [`Input`], the cursors provided must be generated by this input.
    unsafe fn next_ref(
        cache: &mut Self::Cache,
        cursor: &mut Self::Cursor,
    ) -> Option<&'src Self::Token>;
}

impl<'src> Input<'src> for &'src str {
    type Cursor = usize;
    type Span = SimpleSpan<usize>;

    type Token = char;
    type MaybeToken = char;

    type Cache = Self;

    #[inline]
    fn begin(self) -> (Self::Cursor, Self::Cache) {
        (0, self)
    }

    #[inline]
    fn cursor_location(cursor: &Self::Cursor) -> usize {
        *cursor
    }

    #[inline(always)]
    unsafe fn next_maybe(
        this: &mut Self::Cache,
        cursor: &mut Self::Cursor,
    ) -> Option<Self::MaybeToken> {
        if *cursor < this.len() {
            // SAFETY: `cursor < self.len()` above guarantees cursor is in-bounds
            //         We only ever return cursors that are at a character boundary
            let c = this
                .get_unchecked(*cursor..)
                .chars()
                .next()
                .unwrap_unchecked();
            *cursor += c.len_utf8();
            Some(c)
        } else {
            None
        }
    }

    #[inline(always)]
    unsafe fn span(_this: &mut Self::Cache, range: Range<&Self::Cursor>) -> Self::Span {
        (*range.start..*range.end).into()
    }
}

impl<'src> ExactSizeInput<'src> for &'src str {
    #[inline(always)]
    unsafe fn span_from(this: &mut Self::Cache, range: RangeFrom<&Self::Cursor>) -> Self::Span {
        (*range.start..this.len()).into()
    }
}

impl<'src> ValueInput<'src> for &'src str {
    #[inline(always)]
    unsafe fn next(this: &mut Self::Cache, cursor: &mut Self::Cursor) -> Option<Self::Token> {
        Self::next_maybe(this, cursor)
    }
}

impl Sealed for &str {}
impl<'src> StrInput<'src, char> for &'src str {}

impl<'src> SliceInput<'src> for &'src str {
    type Slice = &'src str;

    #[inline(always)]
    fn full_slice(this: &mut Self::Cache) -> Self::Slice {
        *this
    }

    #[inline(always)]
    unsafe fn slice(this: &mut Self::Cache, range: Range<&Self::Cursor>) -> Self::Slice {
        &this[*range.start..*range.end]
    }

    #[inline(always)]
    unsafe fn slice_from(this: &mut Self::Cache, from: RangeFrom<&Self::Cursor>) -> Self::Slice {
        &this[*from.start..]
    }
}

impl<'src, T> Input<'src> for &'src [T] {
    type Cursor = usize;
    type Span = SimpleSpan<usize>;

    type Token = T;
    type MaybeToken = &'src T;

    type Cache = Self;

    #[inline]
    fn begin(self) -> (Self::Cursor, Self::Cache) {
        (0, self)
    }

    #[inline]
    fn cursor_location(cursor: &Self::Cursor) -> usize {
        *cursor
    }

    #[inline(always)]
    unsafe fn next_maybe(
        this: &mut Self::Cache,
        cursor: &mut Self::Cursor,
    ) -> Option<Self::MaybeToken> {
        if let Some(tok) = this.get(*cursor) {
            *cursor += 1;
            Some(tok)
        } else {
            None
        }
    }

    #[inline(always)]
    unsafe fn span(_this: &mut Self::Cache, range: Range<&Self::Cursor>) -> Self::Span {
        (*range.start..*range.end).into()
    }
}

impl<'src, T> ExactSizeInput<'src> for &'src [T] {
    #[inline(always)]
    unsafe fn span_from(this: &mut Self::Cache, range: RangeFrom<&Self::Cursor>) -> Self::Span {
        (*range.start..this.len()).into()
    }
}

impl Sealed for &[u8] {}
impl<'src> StrInput<'src, u8> for &'src [u8] {}

impl<'src, T> SliceInput<'src> for &'src [T] {
    type Slice = &'src [T];

    #[inline(always)]
    fn full_slice(this: &mut Self::Cache) -> Self::Slice {
        *this
    }

    #[inline(always)]
    unsafe fn slice(this: &mut Self::Cache, range: Range<&Self::Cursor>) -> Self::Slice {
        &this[*range.start..*range.end]
    }

    #[inline(always)]
    unsafe fn slice_from(this: &mut Self::Cache, from: RangeFrom<&Self::Cursor>) -> Self::Slice {
        &this[*from.start..]
    }
}

impl<'src, T: Clone> ValueInput<'src> for &'src [T] {
    #[inline(always)]
    unsafe fn next(this: &mut Self::Cache, cursor: &mut Self::Cursor) -> Option<Self::Token> {
        Self::next_maybe(this, cursor).cloned()
    }
}

impl<'src, T> BorrowInput<'src> for &'src [T] {
    #[inline(always)]
    unsafe fn next_ref(
        this: &mut Self::Cache,
        cursor: &mut Self::Cursor,
    ) -> Option<&'src Self::Token> {
        Self::next_maybe(this, cursor)
    }
}

impl<'src, T: 'src, const N: usize> Input<'src> for &'src [T; N] {
    type Cursor = usize;
    type Span = SimpleSpan<usize>;

    type Token = T;
    type MaybeToken = &'src T;

    type Cache = Self;

    #[inline]
    fn begin(self) -> (Self::Cursor, Self::Cache) {
        (0, self)
    }

    #[inline]
    fn cursor_location(cursor: &Self::Cursor) -> usize {
        *cursor
    }

    #[inline(always)]
    unsafe fn next_maybe(
        this: &mut Self::Cache,
        cursor: &mut Self::Cursor,
    ) -> Option<Self::MaybeToken> {
        if let Some(tok) = this.get(*cursor) {
            *cursor += 1;
            Some(tok)
        } else {
            None
        }
    }

    #[inline(always)]
    unsafe fn span(_this: &mut Self::Cache, range: Range<&Self::Cursor>) -> Self::Span {
        (*range.start..*range.end).into()
    }
}

impl<'src, T: 'src, const N: usize> ExactSizeInput<'src> for &'src [T; N] {
    #[inline(always)]
    unsafe fn span_from(this: &mut Self::Cache, range: RangeFrom<&Self::Cursor>) -> Self::Span {
        (*range.start..this.len()).into()
    }
}

impl<const N: usize> Sealed for &[u8; N] {}
impl<'src, const N: usize> StrInput<'src, u8> for &'src [u8; N] {}

impl<'src, T: 'src, const N: usize> SliceInput<'src> for &'src [T; N] {
    type Slice = &'src [T];

    #[inline(always)]
    fn full_slice(this: &mut Self::Cache) -> Self::Slice {
        *this
    }

    #[inline(always)]
    unsafe fn slice(this: &mut Self::Cache, range: Range<&Self::Cursor>) -> Self::Slice {
        &this[*range.start..*range.end]
    }

    #[inline(always)]
    unsafe fn slice_from(this: &mut Self::Cache, from: RangeFrom<&Self::Cursor>) -> Self::Slice {
        &this[*from.start..]
    }
}

impl<'src, T: Clone + 'src, const N: usize> ValueInput<'src> for &'src [T; N] {
    #[inline(always)]
    unsafe fn next(this: &mut Self::Cache, cursor: &mut Self::Cursor) -> Option<Self::Token> {
        Self::next_maybe(this, cursor).cloned()
    }
}

impl<'src, T: 'src, const N: usize> BorrowInput<'src> for &'src [T; N] {
    #[inline(always)]
    unsafe fn next_ref(
        this: &mut Self::Cache,
        cursor: &mut Self::Cursor,
    ) -> Option<&'src Self::Token> {
        Self::next_maybe(this, cursor)
    }
}

/// A wrapper around an input that splits an input into spans and tokens. See [`Input::spanned`].
#[derive(Copy, Clone)]
pub struct SpannedInput<T, S, I> {
    input: I,
    eoi: S,
    phantom: PhantomData<T>,
}

impl<'src, T, S, I> Input<'src> for SpannedInput<T, S, I>
where
    I: Input<'src, Token = (T, S)>,
    T: 'src,
    S: Span + Clone + 'src,
{
    type Cursor = (I::Cursor, Option<S::Offset>);
    type Span = S;

    type Token = T;
    type MaybeToken = <I::MaybeToken as IntoMaybe<'src, I::Token>>::Proj<Self::Token>;

    type Cache = (I::Cache, S);

    #[inline]
    fn begin(self) -> (Self::Cursor, Self::Cache) {
        let (cursor, cache) = self.input.begin();
        ((cursor, None), (cache, self.eoi))
    }

    #[inline]
    fn cursor_location(cursor: &Self::Cursor) -> usize {
        I::cursor_location(&cursor.0)
    }

    #[inline(always)]
    unsafe fn next_maybe(
        (cache, _): &mut Self::Cache,
        cursor: &mut Self::Cursor,
    ) -> Option<Self::MaybeToken> {
        I::next_maybe(cache, &mut cursor.0).map(|tok| {
            cursor.1 = Some(tok.borrow().1.end());
            tok.map_maybe(|(tok, _)| tok, |(tok, _)| tok)
        })
    }

    #[inline]
    unsafe fn span((cache, eoi): &mut Self::Cache, range: Range<&Self::Cursor>) -> Self::Span {
        let start = I::next_maybe(cache, &mut range.start.0.clone())
            .map(|tok| tok.borrow().1.start())
            // .or_else(|| self.input.next_maybe(self.input.start()).1)
            .unwrap_or_else(|| eoi.start());
        let end = range.end.1.clone().unwrap_or_else(|| eoi.end());
        S::new(eoi.context(), start..end)
    }
}

impl<'src, T, S, I> ExactSizeInput<'src> for SpannedInput<T, S, I>
where
    I: ExactSizeInput<'src, Token = (T, S)>,
    T: 'src,
    S: Span + Clone + 'src,
{
    #[inline(always)]
    unsafe fn span_from(
        (cache, eoi): &mut Self::Cache,
        range: RangeFrom<&Self::Cursor>,
    ) -> Self::Span {
        let start = I::next_maybe(cache, &mut range.start.0.clone())
            .map(|tok| tok.borrow().1.start())
            // .or_else(|| self.input.next_maybe(self.input.start()).1)
            .unwrap_or_else(|| eoi.start());
        S::new(eoi.context(), start..eoi.end())
    }
}

impl<'src, T, S, I> ValueInput<'src> for SpannedInput<T, S, I>
where
    I: ValueInput<'src, Token = (T, S)>,
    T: 'src,
    S: Span + Clone + 'src,
{
    #[inline(always)]
    unsafe fn next((cache, _): &mut Self::Cache, cursor: &mut Self::Cursor) -> Option<Self::Token> {
        I::next(cache, &mut cursor.0).map(|tok| {
            cursor.1 = Some(tok.1.end());
            tok.0
        })
    }
}

impl<'src, T, S, I> BorrowInput<'src> for SpannedInput<T, S, I>
where
    I: Input<'src> + BorrowInput<'src, Token = (T, S)>,
    T: 'src,
    S: Span + Clone + 'src,
{
    #[inline(always)]
    unsafe fn next_ref(
        (cache, _): &mut Self::Cache,
        cursor: &mut Self::Cursor,
    ) -> Option<&'src Self::Token> {
        I::next_ref(cache, &mut cursor.0).map(|tok| {
            cursor.1 = Some(tok.1.end());
            &tok.0
        })
    }
}

impl<'src, T, S, I> SliceInput<'src> for SpannedInput<T, S, I>
where
    I: Input<'src> + SliceInput<'src, Token = (T, S)>,
    T: 'src,
    S: Span + Clone + 'src,
{
    type Slice = I::Slice;

    #[inline(always)]
    fn full_slice((cache, _): &mut Self::Cache) -> Self::Slice {
        I::full_slice(cache)
    }

    #[inline(always)]
    unsafe fn slice((cache, _): &mut Self::Cache, range: Range<&Self::Cursor>) -> Self::Slice {
        I::slice(cache, &range.start.0..&range.end.0)
    }

    #[inline(always)]
    unsafe fn slice_from(
        (cache, _): &mut Self::Cache,
        from: RangeFrom<&Self::Cursor>,
    ) -> Self::Slice {
        I::slice_from(cache, &from.start.0..)
    }
}

/// An input wrapper that returns a custom span, with the user-defined context
/// contained in the Span::Context. See [`Input::with_context`].
#[derive(Copy, Clone)]
pub struct WithContext<S: Span, I> {
    input: I,
    context: S::Context,
    phantom: PhantomData<S>,
}

impl<'src, S, I: Input<'src>> Input<'src> for WithContext<S, I>
where
    S: Span + Clone + 'src,
    S::Context: Clone + 'src,
    S::Offset: From<<I::Span as Span>::Offset>,
{
    type Cursor = I::Cursor;
    type Span = S;

    type Token = I::Token;
    type MaybeToken = I::MaybeToken;

    type Cache = (I::Cache, S::Context);

    #[inline(always)]
    fn begin(self) -> (Self::Cursor, Self::Cache) {
        let (cursor, cache) = self.input.begin();
        (cursor, (cache, self.context))
    }

    #[inline]
    fn cursor_location(cursor: &Self::Cursor) -> usize {
        I::cursor_location(cursor)
    }

    #[inline(always)]
    unsafe fn next_maybe(
        (cache, _): &mut Self::Cache,
        cursor: &mut Self::Cursor,
    ) -> Option<Self::MaybeToken> {
        I::next_maybe(cache, cursor)
    }

    #[inline]
    unsafe fn span((cache, ctx): &mut Self::Cache, range: Range<&Self::Cursor>) -> Self::Span {
        let inner_span = I::span(cache, range);
        S::new(
            ctx.clone(),
            inner_span.start().into()..inner_span.end().into(),
        )
    }
}

impl<'src, S, I: Input<'src>> ExactSizeInput<'src> for WithContext<S, I>
where
    I: ExactSizeInput<'src>,
    S: Span + Clone + 'src,
    S::Context: Clone + 'src,
    S::Offset: From<<I::Span as Span>::Offset>,
{
    #[inline]
    unsafe fn span_from(
        (cache, ctx): &mut Self::Cache,
        range: RangeFrom<&Self::Cursor>,
    ) -> Self::Span {
        let inner_span = I::span_from(cache, range);
        S::new(
            ctx.clone(),
            inner_span.start().into()..inner_span.end().into(),
        )
    }
}

impl<'src, S, I: ValueInput<'src>> ValueInput<'src> for WithContext<S, I>
where
    S: Span + Clone + 'src,
    S::Context: Clone + 'src,
    S::Offset: From<<I::Span as Span>::Offset>,
{
    #[inline(always)]
    unsafe fn next((cache, _): &mut Self::Cache, cursor: &mut Self::Cursor) -> Option<Self::Token> {
        I::next(cache, cursor)
    }
}

impl<'src, S, I: BorrowInput<'src>> BorrowInput<'src> for WithContext<S, I>
where
    S: Span + Clone + 'src,
    S::Context: Clone + 'src,
    S::Offset: From<<I::Span as Span>::Offset>,
{
    #[inline(always)]
    unsafe fn next_ref(
        (cache, _): &mut Self::Cache,
        cursor: &mut Self::Cursor,
    ) -> Option<&'src Self::Token> {
        I::next_ref(cache, cursor)
    }
}

impl<'src, S, I: SliceInput<'src>> SliceInput<'src> for WithContext<S, I>
where
    S: Span + Clone + 'src,
    S::Context: Clone + 'src,
    S::Offset: From<<I::Span as Span>::Offset>,
{
    type Slice = I::Slice;

    #[inline(always)]
    fn full_slice((cache, _): &mut Self::Cache) -> Self::Slice {
        I::full_slice(cache)
    }

    #[inline(always)]
    unsafe fn slice((cache, _): &mut Self::Cache, range: Range<&Self::Cursor>) -> Self::Slice {
        I::slice(cache, range)
    }

    #[inline(always)]
    unsafe fn slice_from(
        (cache, _): &mut Self::Cache,
        from: RangeFrom<&Self::Cursor>,
    ) -> Self::Slice {
        I::slice_from(cache, from)
    }
}

impl<'src, S, I> Sealed for WithContext<S, I>
where
    I: Input<'src>,
    S: Span + Clone + 'src,
    S::Context: Clone + 'src,
    S::Offset: From<<I::Span as Span>::Offset>,
{
}
impl<'src, C, S, I> StrInput<'src, C> for WithContext<S, I>
where
    I: StrInput<'src, C>,
    S: Span + Clone + 'src,
    S::Context: Clone + 'src,
    S::Offset: From<<I::Span as Span>::Offset>,
    C: Char,
{
}

/// An input wrapper that maps the span type of your input
/// into your custom span [`Input::map_span`].
#[derive(Copy, Clone)]
pub struct MappedSpan<S: Span, I, F> {
    input: I,
    map_fn: F,
    phantom: PhantomData<S>,
}

impl<'src, S, I: Input<'src>, F: 'src> Input<'src> for MappedSpan<S, I, F>
where
    S: Span + Clone + 'src,
    S::Context: Clone + 'src,
    S::Offset: From<<I::Span as Span>::Offset>,
    F: Fn(I::Span) -> S,
{
    type Cursor = I::Cursor;
    type Span = S;

    type Token = I::Token;
    type MaybeToken = I::MaybeToken;

    type Cache = (I::Cache, F);

    #[inline(always)]
    fn begin(self) -> (Self::Cursor, Self::Cache) {
        let (cursor, cache) = self.input.begin();
        (cursor, (cache, self.map_fn))
    }

    #[inline]
    fn cursor_location(cursor: &Self::Cursor) -> usize {
        I::cursor_location(cursor)
    }

    #[inline(always)]
    unsafe fn next_maybe(
        (cache, _): &mut Self::Cache,
        cursor: &mut Self::Cursor,
    ) -> Option<Self::MaybeToken> {
        I::next_maybe(cache, cursor)
    }

    #[inline]
    unsafe fn span((cache, mapper): &mut Self::Cache, range: Range<&Self::Cursor>) -> Self::Span {
        let inner_span = I::span(cache, range);
        (mapper)(inner_span)
    }
}

impl<'src, S, I: Input<'src>, F: 'src> ExactSizeInput<'src> for MappedSpan<S, I, F>
where
    I: ExactSizeInput<'src>,
    S: Span + Clone + 'src,
    S::Context: Clone + 'src,
    S::Offset: From<<I::Span as Span>::Offset>,
    F: Fn(I::Span) -> S,
{
    #[inline(always)]
    unsafe fn span_from(
        (cache, mapper): &mut Self::Cache,
        range: RangeFrom<&Self::Cursor>,
    ) -> Self::Span {
        let inner_span = I::span_from(cache, range);
        (mapper)(inner_span)
    }
}

impl<'src, S, I: ValueInput<'src>, F: 'src> ValueInput<'src> for MappedSpan<S, I, F>
where
    S: Span + Clone + 'src,
    S::Context: Clone + 'src,
    S::Offset: From<<I::Span as Span>::Offset>,
    F: Fn(I::Span) -> S,
{
    #[inline(always)]
    unsafe fn next((cache, _): &mut Self::Cache, cursor: &mut Self::Cursor) -> Option<Self::Token> {
        I::next(cache, cursor)
    }
}

impl<'src, S, I: BorrowInput<'src>, F: 'src> BorrowInput<'src> for MappedSpan<S, I, F>
where
    S: Span + Clone + 'src,
    S::Context: Clone + 'src,
    S::Offset: From<<I::Span as Span>::Offset>,
    F: Fn(I::Span) -> S,
{
    #[inline(always)]
    unsafe fn next_ref(
        (cache, _): &mut Self::Cache,
        cursor: &mut Self::Cursor,
    ) -> Option<&'src Self::Token> {
        I::next_ref(cache, cursor)
    }
}

impl<'src, S, I: SliceInput<'src>, F: 'src> SliceInput<'src> for MappedSpan<S, I, F>
where
    S: Span + Clone + 'src,
    S::Context: Clone + 'src,
    S::Offset: From<<I::Span as Span>::Offset>,
    F: Fn(I::Span) -> S,
{
    type Slice = I::Slice;

    #[inline(always)]
    fn full_slice((cache, _): &mut Self::Cache) -> Self::Slice {
        I::full_slice(cache)
    }

    #[inline(always)]
    unsafe fn slice((cache, _): &mut Self::Cache, range: Range<&Self::Cursor>) -> Self::Slice {
        I::slice(cache, range)
    }

    #[inline(always)]
    unsafe fn slice_from(
        (cache, _): &mut Self::Cache,
        from: RangeFrom<&Self::Cursor>,
    ) -> Self::Slice {
        I::slice_from(cache, from)
    }
}

impl<'src, S, I, F: 'src> Sealed for MappedSpan<S, I, F>
where
    I: Input<'src>,
    S: Span + Clone + 'src,
    S::Context: Clone + 'src,
    S::Offset: From<<I::Span as Span>::Offset>,
    F: Fn(I::Span) -> S,
{
}
impl<'src, C, S, I, F: 'src> StrInput<'src, C> for MappedSpan<S, I, F>
where
    I: StrInput<'src, C>,
    S: Span + Clone + 'src,
    S::Context: Clone + 'src,
    S::Offset: From<<I::Span as Span>::Offset>,
    F: Fn(I::Span) -> S,
    C: Char,
{
}

/// Input type which supports seekable readers. Uses a [`BufReader`] internally to buffer input and
/// avoid unnecessary IO calls.
///
/// Only available with the `std` feature
#[cfg(feature = "std")]
pub struct IoInput<R> {
    reader: BufReader<R>,
    last_cursor: usize,
}

#[cfg(feature = "std")]
impl<R: Read + Seek> IoInput<R> {
    /// Create a new `IoReader` from a seekable reader.
    pub fn new(reader: R) -> IoInput<R> {
        IoInput {
            reader: BufReader::new(reader),
            last_cursor: 0,
        }
    }
}

#[cfg(feature = "std")]
impl<'src, R: Read + Seek + 'src> Input<'src> for IoInput<R> {
    type Cursor = usize;
    type Span = SimpleSpan;

    type Token = u8;
    type MaybeToken = u8;

    type Cache = Self;

    fn begin(self) -> (Self::Cursor, Self::Cache) {
        (0, self)
    }

    #[inline(always)]
    fn cursor_location(cursor: &Self::Cursor) -> usize {
        *cursor
    }

    #[inline(always)]
    unsafe fn next_maybe(
        this: &mut Self::Cache,
        cursor: &mut Self::Cursor,
    ) -> Option<Self::MaybeToken> {
        Self::next(this, cursor)
    }

    #[inline]
    unsafe fn span(_this: &mut Self::Cache, range: Range<&Self::Cursor>) -> Self::Span {
        (*range.start..*range.end).into()
    }
}

#[cfg(feature = "std")]
impl<'src, R: Read + Seek + 'src> ValueInput<'src> for IoInput<R> {
    unsafe fn next(this: &mut Self::Cache, cursor: &mut Self::Cursor) -> Option<Self::Token> {
        if *cursor != this.last_cursor {
            let seek = *cursor as i64 - this.last_cursor as i64;

            this.reader.seek_relative(seek).unwrap();

            this.last_cursor = *cursor;
        }

        let mut out = 0;

        let r = this.reader.read_exact(std::slice::from_mut(&mut out));

        match r {
            Ok(()) => {
                this.last_cursor += 1;
                *cursor += 1;
                Some(out)
            }
            Err(_) => None,
        }
    }
}

/// Represents a location in an input that can be rewound to.
///
/// Checkpoints can be created with [`InputRef::save`] and rewound to with [`InputRef::rewind`].
pub struct Checkpoint<'src, 'parse, I: Input<'src>, C> {
    cursor: Cursor<'src, 'parse, I>,
    pub(crate) err_count: usize,
    pub(crate) inspector: C,
    phantom: PhantomData<fn(&'parse ()) -> &'parse ()>, // Invariance
}

impl<'src, 'parse, I: Input<'src>, C> Checkpoint<'src, 'parse, I, C> {
    /// Get the [`Cursor`] that this checkpoint corresponds to.
    pub fn cursor(&self) -> &Cursor<'src, 'parse, I> {
        &self.cursor
    }

    /// Get the [`Checkpoint`][Inspector::Checkpoint] that this marker corresponds to.
    pub fn inspector(&self) -> &C {
        &self.inspector
    }
}

impl<'src, I: Input<'src>, C: Clone> Clone for Checkpoint<'src, '_, I, C> {
    #[inline(always)]
    fn clone(&self) -> Self {
        Self {
            cursor: self.cursor.clone(),
            err_count: self.err_count,
            inspector: self.inspector.clone(),
            phantom: PhantomData,
        }
    }
}

/// Represents a location in an input.
///
/// If you to rewind to an old input location, see [`Checkpoint`].
#[repr(transparent)]
pub struct Cursor<'src, 'parse, I: Input<'src>> {
    pub(crate) inner: I::Cursor,
    phantom: PhantomData<fn(&'parse ()) -> &'parse ()>, // Invariance
}

impl<'src, I: Input<'src>> Cursor<'src, '_, I> {
    /// Get the input's internal cursor.
    pub fn inner(&self) -> &I::Cursor {
        &self.inner
    }
}

impl<'src, I: Input<'src>> Clone for Cursor<'src, '_, I> {
    #[inline(always)]
    fn clone(&self) -> Self {
        Self {
            inner: self.inner.clone(),
            phantom: PhantomData,
        }
    }
}

impl<'src, I: Input<'src>> Eq for Cursor<'src, '_, I> {}
impl<'src, I: Input<'src>> PartialEq for Cursor<'src, '_, I> {
    fn eq(&self, other: &Self) -> bool {
        I::cursor_location(&self.inner)
            .cmp(&I::cursor_location(&other.inner))
            .is_eq()
    }
}

impl<'src, I: Input<'src>> PartialOrd for Cursor<'src, '_, I> {
    fn partial_cmp(&self, other: &Self) -> Option<Ordering> {
        Some(I::cursor_location(&self.inner).cmp(&I::cursor_location(&other.inner)))
    }
}

impl<'src, I: Input<'src>> Ord for Cursor<'src, '_, I> {
    fn cmp(&self, other: &Self) -> Ordering {
        I::cursor_location(&self.inner).cmp(&I::cursor_location(&other.inner))
    }
}

pub(crate) struct Errors<T, E> {
    pub(crate) alt: Option<Located<T, E>>,
    pub(crate) secondary: Vec<Located<T, E>>,
}

impl<T, E> Errors<T, E> {
    /// Returns a slice of the secondary errors (if any) have been emitted since the given checkpoint was created.
    #[inline]
    pub(crate) fn secondary_errors_since(&mut self, err_count: usize) -> &mut [Located<T, E>] {
        self.secondary.get_mut(err_count..).unwrap_or(&mut [])
    }
}

impl<T, E> Default for Errors<T, E> {
    fn default() -> Self {
        Self {
            alt: None,
            secondary: Vec::new(),
        }
    }
}

/// Internal type representing the owned parts of an input - used at the top level by a call to
/// `parse`.
pub(crate) struct InputOwn<'src, 's, I: Input<'src>, E: ParserExtra<'src, I>> {
    pub(crate) start: I::Cursor,
    pub(crate) cache: I::Cache,
    pub(crate) errors: Errors<I::Cursor, E::Error>,
    pub(crate) state: MaybeMut<'s, E::State>,
    pub(crate) ctx: E::Context,
    #[cfg(feature = "memoization")]
    pub(crate) memos: HashMap<(usize, usize), Option<Located<I::Cursor, E::Error>>>,
}

impl<'src, 's, I, E> InputOwn<'src, 's, I, E>
where
    I: Input<'src>,
    E: ParserExtra<'src, I>,
{
    #[cfg_attr(not(test), allow(dead_code))]
    pub(crate) fn new(input: I) -> InputOwn<'src, 's, I, E>
    where
        E::State: Default,
        E::Context: Default,
    {
        let (start, cache) = input.begin();
        InputOwn {
            start,
            cache,
            errors: Errors::default(),
            state: MaybeMut::Val(E::State::default()),
            ctx: E::Context::default(),
            #[cfg(feature = "memoization")]
            memos: HashMap::default(),
        }
    }

    pub(crate) fn new_state(input: I, state: &'s mut E::State) -> InputOwn<'src, 's, I, E>
    where
        E::Context: Default,
    {
        let (start, cache) = input.begin();
        InputOwn {
            start,
            cache,
            errors: Errors::default(),
            state: MaybeMut::Ref(state),
            ctx: E::Context::default(),
            #[cfg(feature = "memoization")]
            memos: HashMap::default(),
        }
    }

    pub(crate) fn as_ref_start<'parse>(&'parse mut self) -> InputRef<'src, 'parse, I, E> {
        InputRef {
            cursor: self.start.clone(),
            cache: &mut self.cache,
            errors: &mut self.errors,
            state: &mut self.state,
            ctx: &self.ctx,
            #[cfg(feature = "memoization")]
            memos: &mut self.memos,
        }
    }

    pub(crate) fn into_errs(self) -> Vec<E::Error> {
        self.errors
            .secondary
            .into_iter()
            .map(|err| err.err)
            .collect()
    }
}

/// Internal type representing an input as well as all the necessary context for parsing.
pub struct InputRef<'src, 'parse, I: Input<'src>, E: ParserExtra<'src, I>> {
    cursor: I::Cursor,
    pub(crate) cache: &'parse mut I::Cache,
    pub(crate) errors: &'parse mut Errors<I::Cursor, E::Error>,
    pub(crate) state: &'parse mut E::State,
    pub(crate) ctx: &'parse E::Context,
    #[cfg(feature = "memoization")]
    pub(crate) memos: &'parse mut HashMap<(usize, usize), Option<Located<I::Cursor, E::Error>>>,
}

impl<'src, 'parse, I: Input<'src>, E: ParserExtra<'src, I>> InputRef<'src, 'parse, I, E> {
    #[inline]
    pub(crate) fn with_ctx<'sub_parse, EM, O>(
        &'sub_parse mut self,
        new_ctx: &'sub_parse EM::Context,
        f: impl FnOnce(&mut InputRef<'src, 'sub_parse, I, EM>) -> O,
    ) -> O
    where
        'parse: 'sub_parse,
        EM: ParserExtra<'src, I, Error = E::Error, State = E::State>,
    {
        let mut new_inp = InputRef {
            cursor: self.cursor.clone(),
            cache: self.cache,
            state: self.state,
            ctx: new_ctx,
            errors: self.errors,
            #[cfg(feature = "memoization")]
            memos: self.memos,
        };
        let res = f(&mut new_inp);
        self.cursor = new_inp.cursor;
        res
    }

    #[inline]
    pub(crate) fn with_state<'sub_parse, S, O>(
        &'sub_parse mut self,
        new_state: &'sub_parse mut S,
        f: impl FnOnce(&mut InputRef<'src, 'sub_parse, I, extra::Full<E::Error, S, E::Context>>) -> O,
    ) -> O
    where
        'parse: 'sub_parse,
        S: 'src + Inspector<'src, I>,
    {
        let mut new_inp = InputRef {
            cursor: self.cursor.clone(),
            cache: self.cache,
            state: new_state,
            ctx: self.ctx,
            errors: self.errors,
            #[cfg(feature = "memoization")]
            memos: self.memos,
        };
        let res = f(&mut new_inp);
        self.cursor = new_inp.cursor;
        res
    }

    #[inline]
    pub(crate) fn with_input<'sub_parse, O>(
        &'sub_parse mut self,
        start: I::Cursor,
        cache: &'sub_parse mut I::Cache,
        f: impl FnOnce(&mut InputRef<'src, 'sub_parse, I, E>) -> O,
        #[cfg(feature = "memoization")] memos: &'sub_parse mut HashMap<
            (usize, usize),
            Option<Located<I::Cursor, E::Error>>,
        >,
    ) -> O
    where
        'parse: 'sub_parse,
    {
        let mut new_inp = InputRef {
            cursor: start,
            cache,
            state: self.state,
            ctx: self.ctx,
            errors: self.errors,
            #[cfg(feature = "memoization")]
            memos,
        };
        f(&mut new_inp)
    }

    /// Get the internal cursor of the input at this moment in time.
    ///
    /// Can be used for generating spans or slices. See [`InputRef::span_from`] and [`InputRef::slice`].
    #[inline(always)]
    pub fn cursor(&self) -> Cursor<'src, 'parse, I> {
        Cursor {
            // TODO: Find ways to avoid this clone, if possible
            inner: self.cursor.clone(),
            phantom: PhantomData,
        }
    }

    /// Save the current parse state as a [`Checkpoint`].
    ///
    /// You can rewind back to this state later with [`InputRef::rewind`].
    #[inline(always)]
    pub fn save(
        &self,
    ) -> Checkpoint<'src, 'parse, I, <E::State as Inspector<'src, I>>::Checkpoint> {
        let cursor = self.cursor();
        let inspector = self.state.on_save(&cursor);
        Checkpoint {
            cursor,
            err_count: self.errors.secondary.len(),
            inspector,
            phantom: PhantomData,
        }
    }

    /// Reset the parse state to that represented by the given [`Checkpoint`].
    ///
    /// You can create a checkpoint with which to perform rewinding using [`InputRef::save`].
    #[inline(always)]
    pub fn rewind(
        &mut self,
        checkpoint: Checkpoint<'src, 'parse, I, <E::State as Inspector<'src, I>>::Checkpoint>,
    ) {
        self.errors.secondary.truncate(checkpoint.err_count);
        self.state.on_rewind(&checkpoint);
        self.cursor = checkpoint.cursor.inner;
    }

    /// Get a mutable reference to the state associated with the current parse.
    #[inline(always)]
    pub fn state(&mut self) -> &mut E::State {
        self.state
    }

    /// Get a reference to the context fed to the current parser.
    ///
    /// See [`ConfigParser::configure`], [`Parser::ignore_with_ctx`] and
    /// [`Parser::then_with_ctx`] for more information about context-sensitive
    /// parsing.
    #[inline(always)]
    pub fn ctx(&self) -> &E::Context {
        self.ctx
    }

    #[inline]
    pub(crate) fn skip_while<F: FnMut(&I::Token) -> bool>(&mut self, mut f: F)
    where
        I: Input<'src>,
    {
        loop {
            let mut cursor = self.cursor.clone();
            // SAFETY: cursor was generated by previous call to `Input::next`
            let token = unsafe { I::next_maybe(self.cache, &mut cursor) };
            if token.as_ref().filter(|tok| f((*tok).borrow())).is_none() {
                break;
            } else {
                if let Some(t) = &token {
                    self.state.on_token(t.borrow());
                }
                self.cursor = cursor;
            }
        }
    }

    #[inline(always)]
    pub(crate) fn next_inner(&mut self) -> Option<I::Token>
    where
        I: ValueInput<'src>,
    {
        // SAFETY: cursor was generated by previous call to `Input::next`
        let token = unsafe { I::next(self.cache, &mut self.cursor) };
        if let Some(t) = &token {
            self.state.on_token(t);
        }
        token
    }

    #[inline(always)]
    pub(crate) fn next_maybe_inner(&mut self) -> Option<I::MaybeToken> {
        // SAFETY: cursor was generated by previous call to `Input::next`
        let token = unsafe { I::next_maybe(self.cache, &mut self.cursor) };
        if let Some(t) = &token {
            self.state.on_token(t.borrow());
        }
        token
    }

    #[inline(always)]
    pub(crate) fn next_ref_inner(&mut self) -> Option<&'src I::Token>
    where
        I: BorrowInput<'src>,
    {
        // SAFETY: cursor was generated by previous call to `Input::next`
        let token = unsafe { I::next_ref(self.cache, &mut self.cursor) };
        if let Some(t) = &token {
            self.state.on_token(t);
        }
        token
    }

    /// Attempt to parse this input using the given parser.
    ///
    /// # Important Notice
    ///
    /// Parsers that return `Err(...)` are permitted to leave the input in an **unspecified** (but not
    /// [undefined](https://en.wikipedia.org/wiki/Undefined_behavior)) state.
    ///
    /// The only well-specified action you are permitted to perform on the input after an error has occurred is
    /// rewinding to a checkpoint created *before* the error occurred via [`InputRef::rewind`].
    ///
    /// This state is not consistent between releases of chumsky, compilations of the final binary, or even invocations
    /// of the parser. You should not rely on this state for anything, and choosing to rely on it means that your
    /// parser may break in unexpected ways at any time.
    ///
    /// You have been warned.
    pub fn parse<O, P: Parser<'src, I, O, E>>(&mut self, parser: P) -> Result<O, E::Error> {
        match parser.go::<Emit>(self) {
            Ok(out) => Ok(out),
            Err(()) => Err(self.take_alt().err),
        }
    }

    /// A check-only version of [`InputRef::parse`].
    ///
    /// # Import Notice
    ///
    /// See [`InputRef::parse`] about unspecified behavior associated with this function.
    pub fn check<O, P: Parser<'src, I, O, E>>(&mut self, parser: P) -> Result<(), E::Error> {
        match parser.go::<Check>(self) {
            Ok(()) => Ok(()),
            Err(()) => Err(self.take_alt().err),
        }
    }

    /// Get the next token in the input. Returns `None` if the end of the input has been reached.
    ///
    /// This function is more flexible than either [`InputRef::next`] or [`InputRef::next_ref`] since it
    /// only requires that the [`Input`] trait be implemented for `I` (instead of either [`ValueInput`] or
    /// [`BorrowInput`]). However, that increased flexibility for the end user comes with a trade-off for the
    /// implementation: this function returns a [`MaybeRef<I::Token>`] that provides only a temporary reference to the
    /// token.
    ///
    /// See [`InputRef::next_ref`] if you want get a reference to the next token instead.
    #[inline(always)]
    pub fn next_maybe(&mut self) -> Option<MaybeRef<'src, I::Token>> {
        self.next_maybe_inner().map(Into::into)
    }

    /// Get the next token in the input by value. Returns `None` if the end of the input has been reached.
    ///
    /// See [`InputRef::next_ref`] if you want get a reference to the next token instead.
    #[inline(always)]
    pub fn next(&mut self) -> Option<I::Token>
    where
        I: ValueInput<'src>,
    {
        self.next_inner()
    }

    /// Get a reference to the next token in the input. Returns `None` if the end of the input has been reached.
    ///
    /// See [`InputRef::next`] if you want get the next token by value instead.
    #[inline(always)]
    pub fn next_ref(&mut self) -> Option<&'src I::Token>
    where
        I: BorrowInput<'src>,
    {
        self.next_ref_inner()
    }

    /// Peek the next token in the input. Returns `None` if the end of the input has been reached.
    ///
    /// See [`InputRef::next_maybe`] for more information about what this function guarantees.
    #[inline(always)]
    pub fn peek_maybe(&mut self) -> Option<MaybeRef<'src, I::Token>> {
        // SAFETY: cursor was generated by previous call to `Input::next`
        unsafe { I::next_maybe(self.cache, &mut self.cursor.clone()).map(Into::into) }
    }

    /// Peek the next token in the input. Returns `None` if the end of the input has been reached.
    #[inline(always)]
    pub fn peek(&mut self) -> Option<I::Token>
    where
        I: ValueInput<'src>,
    {
        // SAFETY: cursor was generated by previous call to `Input::next`
        unsafe { I::next(self.cache, &mut self.cursor.clone()).map(Into::into) }
    }

    /// Peek the next token in the input. Returns `None` if the end of the input has been reached.
    #[inline(always)]
    pub fn peek_ref(&mut self) -> Option<&'src I::Token>
    where
        I: BorrowInput<'src>,
    {
        // SAFETY: cursor was generated by previous call to `Input::next`
        unsafe { I::next_ref(self.cache, &mut self.cursor.clone()).map(Into::into) }
    }

    /// Skip the next token in the input.
    #[inline(always)]
    pub fn skip(&mut self)
    where
        I: ValueInput<'src>,
    {
        let _ = self.next_inner();
    }

    #[cfg_attr(not(feature = "regex"), allow(dead_code))]
    #[inline]
    pub(crate) fn full_slice(&mut self) -> I::Slice
    where
        I: SliceInput<'src>,
    {
        I::full_slice(self.cache)
    }

    /// Get a slice of the input that covers the given cursor range.
    #[inline]
    pub fn slice(&mut self, range: Range<&Cursor<'src, 'parse, I>>) -> I::Slice
    where
        I: SliceInput<'src>,
    {
        // SAFETY: cursor was generated by previous call to `Input::next`
        unsafe { I::slice(self.cache, &range.start.inner..&range.end.inner) }
    }

    /// Get a slice of the input that covers the given cursor range.
    #[inline]
    pub fn slice_from(&mut self, range: RangeFrom<&Cursor<'src, 'parse, I>>) -> I::Slice
    where
        I: SliceInput<'src>,
    {
        // SAFETY: cursor was generated by previous call to `Input::next`
        unsafe { I::slice_from(self.cache, &range.start.inner..) }
    }

    /// Get a slice of the input that covers the given cursor range.
    #[inline]
    pub fn slice_since(&mut self, range: RangeFrom<&Cursor<'src, 'parse, I>>) -> I::Slice
    where
        I: SliceInput<'src>,
    {
        // SAFETY: cursor was generated by previous call to `Input::next`
        unsafe { I::slice(self.cache, &range.start.inner..&self.cursor) }
    }

    #[cfg_attr(not(feature = "lexical-numbers"), allow(dead_code))]
    #[inline(always)]
    pub(crate) fn slice_trailing_inner(&mut self) -> I::Slice
    where
        I: SliceInput<'src>,
    {
        // SAFETY: cursor was generated by previous call to `Input::next`
        unsafe { I::slice_from(self.cache, &self.cursor..) }
    }

    // /// Get a span over the input that covers the given cursor range.
    // #[inline(always)]
    // pub fn span(&self, range: Range<&Cursor<'src, 'parse, I>>) -> I::Span {
    //     // SAFETY: `Cursor` is invariant over 'parse, so we know that this cursor came from the same input
    //     // See `https://plv.mpi-sws.org/rustbelt/ghostcell/`
    //     unsafe { I::span(self.cache, &range.start.inner..&range.end.inner) }
    // }

    /// Get a span over the input that goes from the given cursor to the end of the input.
    // TODO: Unify with `InputRef::span`
    #[inline(always)]
    pub fn span_from(&mut self, range: RangeFrom<&Cursor<'src, 'parse, I>>) -> I::Span
    where
        I: ExactSizeInput<'src>,
    {
        // SAFETY: `Cursor` is invariant over 'parse, so we know that this cursor came from the same input
        // See `https://plv.mpi-sws.org/rustbelt/ghostcell/`
        unsafe { I::span_from(self.cache, &range.start.inner..) }
    }

    /// Generate a span that extends from the provided [`Cursor`] to the current input position.
    #[inline(always)]
    pub fn span_since(&mut self, before: &Cursor<'src, 'parse, I>) -> I::Span {
        // SAFETY: `Cursor` is invariant over 'parse, so we know that this cursor came from the same input
        // See `https://plv.mpi-sws.org/rustbelt/ghostcell/`
        unsafe { I::span(self.cache, &before.inner..&self.cursor) }
    }

    /// SAFETY: Previous cursor + skip must not exceed length
    #[inline(always)]
    #[cfg(any(feature = "regex", feature = "lexical-numbers"))]
    pub(crate) unsafe fn skip_bytes(&mut self, skip: usize)
    where
        I: SliceInput<'src, Cursor = usize>,
    {
        self.cursor += skip;
    }

    #[inline]
    pub(crate) fn emit(&mut self, error: E::Error) {
        self.errors
            .secondary
            .push(Located::at(self.cursor.clone(), error));
    }

    #[inline]
    pub(crate) fn add_alt<Exp: IntoIterator<Item = Option<MaybeRef<'src, I::Token>>>>(
        &mut self,
        expected: Exp,
        found: Option<MaybeRef<'src, I::Token>>,
        span: I::Span,
    ) {
        if core::mem::size_of::<E::Error>() == 0 {
            return;
        }

        let at = &self.cursor.clone();

        // Prioritize errors before choosing whether to generate the alt (avoids unnecessary error creation)
        self.errors.alt = Some(match self.errors.alt.take() {
            Some(alt) => match I::cursor_location(&alt.pos).cmp(&I::cursor_location(at)) {
                Ordering::Equal => {
                    Located::at(alt.pos, alt.err.merge_expected_found(expected, found, span))
                }
                Ordering::Greater => alt,
                Ordering::Less => Located::at(
                    at.clone(),
                    alt.err.replace_expected_found(expected, found, span),
                ),
            },
            None => Located::at(at.clone(), Error::expected_found(expected, found, span)),
        });
    }

    #[inline]
    pub(crate) fn add_alt_err(&mut self, at: &I::Cursor, err: E::Error) {
        if core::mem::size_of::<E::Error>() == 0 {
            return;
        }

        // Prioritize errors
        self.errors.alt = Some(match self.errors.alt.take() {
            Some(alt) => match I::cursor_location(&alt.pos).cmp(&I::cursor_location(at)) {
                Ordering::Equal => Located::at(alt.pos, alt.err.merge(err)),
                Ordering::Greater => alt,
                Ordering::Less => Located::at(at.clone(), err),
            },
            None => Located::at(at.clone(), err),
        });
    }

    // Take the alt error. If one doesn't exist, generate a fake one.
    pub(crate) fn take_alt(&mut self) -> Located<I::Cursor, E::Error> {
        let fake_span = self.span_since(&self.cursor());
        self.errors.alt.take().unwrap_or_else(|| {
            Located::at(
                self.cursor.clone(),
                E::Error::expected_found([], None, fake_span),
            )
        })
    }
}

/// Struct used in [`Parser::validate`] to collect user-emitted errors
pub struct Emitter<E> {
    emitted: Vec<E>,
}

impl<E> Emitter<E> {
    #[inline]
    pub(crate) fn new() -> Emitter<E> {
        Emitter {
            emitted: Vec::new(),
        }
    }

    #[inline]
    pub(crate) fn errors(self) -> Vec<E> {
        self.emitted
    }

    /// Emit a non-fatal error
    #[inline]
    pub fn emit(&mut self, err: E) {
        self.emitted.push(err)
    }
}

/// See [`Parser::map_with`].
pub struct MapExtra<'src, 'b, I: Input<'src>, E: ParserExtra<'src, I>> {
    before: &'b I::Cursor,
    after: &'b I::Cursor,
    cache: &'b mut I::Cache,
    state: &'b mut E::State,
    ctx: &'b E::Context,
}

impl<'src, 'b, I: Input<'src>, E: ParserExtra<'src, I>> MapExtra<'src, 'b, I, E> {
    #[inline(always)]
    pub(crate) fn new<'parse>(
        before: &'b Cursor<'src, 'parse, I>,
        inp: &'b mut InputRef<'src, 'parse, I, E>,
    ) -> Self {
        Self {
            before: &before.inner,
            after: &inp.cursor,
            cache: inp.cache,
            ctx: inp.ctx,
            state: inp.state,
        }
    }

    /// Get the span corresponding to the output.
    #[inline(always)]
    pub fn span(&mut self) -> I::Span {
        // SAFETY: The cursors both came from the same input
        // TODO: Should this make `MapExtra::new` unsafe? Probably, but it's an internal API and we simply wouldn't
        // ever abuse it in this way, even accidentally.
        unsafe { I::span(self.cache, self.before..self.after) }
    }

    /// Get the slice corresponding to the output.
    #[inline(always)]
    pub fn slice(&mut self) -> I::Slice
    where
        I: SliceInput<'src>,
    {
        // SAFETY: The cursors both came from the same input
        unsafe { I::slice(self.cache, self.before..self.after) }
    }

    /// Get the parser state.
    #[inline(always)]
    pub fn state(&mut self) -> &mut E::State {
        self.state
    }

    /// Get the current parser context.
    #[inline(always)]
    pub fn ctx(&self) -> &E::Context {
        self.ctx
    }
}
